import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Heming Sun
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * use three array of same size to store necessary information
         */
        int[] tagIndex = { -1, -1, -1 };
        String[] tagStr = { "title", "link", "description" };
        String[] actualTag = { "", "", "" };
        /*
         * find elements in channel
         */
        for (int i = 0; i < tagIndex.length; i++) {

            tagIndex[i] = getChildElement(channel, tagStr[i]);
            if (tagIndex[i] != -1
                    && channel.child(tagIndex[i]).numberOfChildren() != 0) {
                actualTag[i] = channel.child(tagIndex[i]).child(0).label();
            } else {
                tagIndex[i] = -1;
            }
        }

        /*
         * print header
         */
        out.print("<html> <head>");

        /*
         * print title
         */
        if (tagIndex[0] != -1) {
            out.print(" <title>");

            out.print(actualTag[0]);
        } else {
            out.print(" <title>Empty Title");
        }
        out.print("</title>");
        out.println("</head> </body>");

        /*
         * print heading
         */

        if (tagIndex[0] != -1 && tagIndex[1] != -1) {
            out.print("<h1>\r\n <a href=\"" + actualTag[1] + "\">");

            out.print(actualTag[0]);
        } else if (tagIndex[1] != -1) {
            out.print("<h1>\r\n <a href=\"" + actualTag[1] + "\">Empty Title");
        } else {
            out.print("<h1>\r\n <a>Empty Title");
        }
        out.print(" </a>\r\n</h1>");

        /*
         * print description
         *
         */
        if (tagIndex[0] != -1) {
            out.print("\n<p>");

            out.print("\n" + actualTag[2]);
        } else {
            out.print(" <p>\nNo Description");
        }
        out.print("\n</p>");

        // print table start tag
        out.println("\n<table border=\"1\">");
        out.print("<tr>\r\n");
        out.print(" <th>Date</th>\r\n");
        out.print(" <th>Source</th>\r\n");
        out.print(" <th>News</th>\r\n");
        out.print("</tr>\r\n");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        out.println("</table>");
        out.println("</body> </html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * TODO: fill in body
         */
        int index = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            XMLTree temp = xml.child(i);
            if (temp.isTag()) {
                if (temp.label().equals(tag) && temp.numberOfChildren() != 0) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * hasTag denotes whether xmlTree has tags in corresponding position in
         * tagStr,
         *
         */
        boolean[] hasTag = { false, false, false, false, false };
        String[] tagStr = { "pubDate", "source", "title", "description",
                "link" };
        String[] actualTag = { "", "", "", "", "" };
        boolean hasSrc = false;
        String srcText = "";

        for (int i = 0; i < item.numberOfChildren(); i++) {

            XMLTree temp = item.child(i);
            if (temp.label().equals(tagStr[0])
                    && temp.numberOfChildren() != 0) {
                hasTag[0] = true;
                actualTag[0] = temp.child(0).label();
            } else if (temp.label().equals(tagStr[1])) {
                hasTag[1] = true;
                actualTag[1] = temp.attributeValue("url");
                if (temp.numberOfChildren() != 0) {
                    hasSrc = true;
                    srcText = temp.child(0).label();
                }
            } else if (temp.label().equals(tagStr[2])
                    && temp.numberOfChildren() != 0) {
                hasTag[2] = true;
                actualTag[2] = temp.child(0).label();
            } else if (temp.label().equals(tagStr[3])
                    && temp.numberOfChildren() != 0) {
                hasTag[3] = true;
                actualTag[3] = temp.child(0).label();
            } else if (temp.label().equals(tagStr[4])
                    && temp.numberOfChildren() != 0) {
                hasTag[4] = true;
                actualTag[4] = temp.child(0).label();
            }
        }

        /*
         * print out date
         */
        out.print("<tr>");
        out.print("\n<th>");
        if (hasTag[0]) {
            out.print(actualTag[0]);
        } else {
            out.print("No date avaliable");
        }
        out.println("</th>");

        /*
         * print out source
         */
        out.print("<th>");
        if (hasTag[1]) {
            out.print("\r\n <a href=\"" + actualTag[1] + "\">");
        }
        if (hasSrc) {
            out.print(srcText + "\r\n</a>");
        } else {
            out.print("No source avaliable \r\n</a>");
        }

        out.println(" \r\n</th>");

        /*
         * print out title
         */

        out.print("<th>");
        if (hasTag[4]) {
            out.print("\r\n <a href=\"" + actualTag[4] + "\">");
        } else {
            out.print("\r\n <a>");
        }

        if (hasTag[2] && !actualTag[2].isEmpty()) {

            out.print(actualTag[2]);
        } else if (hasTag[3] && !actualTag[2].isEmpty()) {
            out.print(actualTag[3]);
        } else {
            out.print("No title avaliable");
        }
        out.println(" </a>\r\n</th>");
        out.println("</tr>");
    }

    /**
     *
     * Processes one sub-feed in XML RSS (version 2.0) feed from a given URL
     * converting it into the corresponding HTML output file.
     *
     * @param xml
     *            the root of rss feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     *
     * @requires out.is_open
     * @requires file is valid file name
     * @requires xml is not null
     *
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processSubFeed(String url, String file,
            SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        XMLTree xml = new XMLTree1(url);
        /*
         * test if url is valid
         */
        if (!xml.label().equals("rss")
                || !xml.attributeValue("version").equals("2.0")) {
            out.println("Error printing " + file + ": invalid rss feed!");
        } else {

            /*
             * process feed if valid
             */
            XMLTree channel = xml.child(0);
            SimpleWriter fileOut = new SimpleWriter1L(file);

            outputHeader(channel, fileOut);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                XMLTree temp = channel.child(i);
                if (temp.label().equals("item")) {
                    processItem(temp, fileOut);
                }

            }

            outputFooter(fileOut);
            out.println("Feed is print to " + file);
        }
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        assert out.isOpen() : "Violation of: out.is_open";
        SimpleWriter fileOut = new SimpleWriter1L(file);
        XMLTree feed = new XMLTree1(url);

        /*
         * print header
         */
        fileOut.print("<html> <head>");

        /*
         * print title
         */

        fileOut.print(" <title>");

        fileOut.print(feed.attributeValue("title"));

        fileOut.print("</title>");
        fileOut.println("</head> </body>");

        /*
         * print heading
         */
        fileOut.print("<h2>");

        fileOut.println(feed.attributeValue("title"));

        fileOut.print("</h2>");

        fileOut.println("<ul>");
        /*
         * print feed list
         */
        for (int i = 0; i < feed.numberOfChildren(); i++) {
            XMLTree subFeed = feed.child(i);
            String feedFile = subFeed.attributeValue("file");
            String feedTitle = subFeed.attributeValue("name");
            String feedUrl = subFeed.attributeValue("url");

            /*
             * print single feed link
             */
            out.println("Printing feed " + (i + 1) + ".");
            processSubFeed(feedUrl, feedFile, out);
            fileOut.println("<li>");
            fileOut.print("  <a href=\"" + feedFile + "\">");
            fileOut.print(feedTitle + "</a>");
            fileOut.print("\r\n</li>");

        }

        /*
         * print footer
         */
        fileOut.println("</ul>");

        fileOut.println("</html>");

        out.println("Index page is written to " + file);
    }

    /**
     * Main method
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Examine if input is valid
         */
        out.print("Enter a valid rss aggregation:");
        String input = in.nextLine();
        XMLTree xml = new XMLTree1(input);

        while (!xml.label().equals("feeds")) {
            out.print("Error!Enter a valid url aggregation:");
            input = in.nextLine();
            xml = new XMLTree1(input);

        }

        String outFile = "index.html";
        processFeed(input, outFile, out);

        in.close();
        out.close();
    }

}
